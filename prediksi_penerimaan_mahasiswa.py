# -*- coding: utf-8 -*-
"""Prediksi Penerimaan Mahasiswa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O81LfT5ma0IG1R52Gb4VgjXRmekv1ott

# **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score , mean_absolute_error

"""# **Load Dataset**

membaca 5 kolom pertama dalam data

"""

# Load dataset
df = pd.read_csv("Admission_Predict.csv")

# Tampilkan 5 data pertama
df.head()

"""# **Preparation Data**

1. drop kolom series

menghapus kolom serial no, karena kolom tersebut tidak relevan dengan fitur yang akan digunakan dan tidak memiliki pengaruh terhadap analisis.
"""

df.drop(columns=['Serial No.'], inplace=True, errors='ignore')

"""2.   melihat informasi data (jumlah data, type data dan lain-lain)



megecek info dataset yang akan digunakan baik jumlah data maupun type data

"""

df.info()

"""3. melihat deskirisi statistik data

menampilkan statistik deskriptif dari sebuah dataset berupa distribusi data numerik, termasuk ukuran pemusatan, dispersi, dan bentuk distribusi
"""

df.describe()

"""4. missing value

mengecek apakah ada data yang kosong(Null) atau missing value  dalam dataset, serta bagaimana penanganannya dapat memengaruhi hasil analisis.
"""

print(df.isnull().sum())

"""5. cek dupikat

mengecek dupliakasi data, apabila terindeksi adanya duplikat data maka data yang duplikat harus ditangani.
"""

duplicates = df.duplicated().sum()
print(f"Jumlah duplikat: {duplicates}")

"""6. mengecek outlier

mengecek dan menghapus outlier yang ada, penanganan outlier pada program ini dengan menggunakan teknik IQR.
"""

# Deteksi outlier menggunakan metode IQR
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

# Buat filter data tanpa outlier
filtered_df = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]

print(f"Jumlah data sebelum membersihkan outlier: {len(df)}")
print(f"Jumlah data setelah membersihkan outlier: {len(filtered_df)}")

# Gunakan dataframe yang sudah difilter untuk proses selanjutnya
df = filtered_df.reset_index(drop=True)

plt.figure(figsize=(15, 10))
for i, column in enumerate(df.columns, 1):
    plt.subplot(3, 3, i)
    sns.boxplot(y=df[column])
    plt.title(f'Boxplot of {column}')
    plt.tight_layout()

plt.suptitle("Outlier Visualization with Boxplots", y=1.02, fontsize=16)
plt.show()

"""7. normalisasi data

menggunakan standatrscaler hal ini dilakuakan agar semua fitur memiliki skala yang seragam untuk menghindari dominasi fitur dengan nilai besar
"""

# Normalisasi data numerik
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df)
df_scaled = pd.DataFrame(scaled_features, columns=df.columns)

"""8. Split dataset

pembagian dataset kedalam bentuk 80:20 dengan 80% sebagai data train dan 20% sebagai data test
"""

# Bagi data menjadi train dan test
X = df.drop('Chance of Admit ', axis=1)
y = df['Chance of Admit ']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42
)

"""# **Modeling**

**Linear Regression**
"""

model_lr = LinearRegression()

model_lr.fit(X_train, y_train)

"""**Evaluasi Model Linear Regresion dengan Menggunakan**


* R² Score
* MSE
* RMSE
* MAE






"""

# Prediksi
y_pred = model_lr.predict(X_test)

# Evaluasi
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae_rf = mean_absolute_error(y_test, y_pred)

print(f"R² Score: {r2:.4f}")
print(f"MSE: {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE: {mae_rf:.4f}")

plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='red')
plt.xlabel("Actual Chance of Admit")
plt.ylabel("Predicted Chance of Admit")
plt.title("Actual vs Predicted (Regresi Linear)")
plt.plot([0, 1], [0, 1], color='blue', linestyle='--')
plt.grid(True)
plt.show()

"""**Random Forest**"""

from sklearn.ensemble import RandomForestRegressor

"""inisialisasi model random forest"""

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

"""melatih model random forest"""

rf_model.fit(X_train, y_train)

"""**Evaluasi Random Forest**

prediksi dan evaluasi model random Forest dengan menggunakan:
* R² Score
* MSE
* RMSE
* MAE
"""

y_pred_rf = rf_model.predict(X_test)


mae_rf = mean_absolute_error(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = np.sqrt(mse_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print("Random Forest Regressor Evaluation:")
print("R² Score:", round(r2_rf, 4))
print("MAE  :", round(mae_rf, 4))
print("MSE  :", round(mse_rf, 4))
print("RMSE :", round(rmse_rf, 4))

plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred_rf, color='blue')
plt.plot([0,1],[0,1],'r--')
plt.xlabel("Actual Chance of Admit")
plt.ylabel("Predicted Chance of Admit")
plt.title("Actual vs Predicted (Random Forest)")
plt.grid(True)
plt.show()

"""**Simpan Model**

menyimpan model kedalam bentuk joblib
"""

import joblib

# Simpan model linear regression
joblib.dump(model_lr, 'linear_regression_model.pkl')

# Simpan model random forest
joblib.dump(rf_model, 'random_forest_model.pkl')

"""**Infernce**

infrence dilakukan untuk memprediksi bagaimana model yang telah disimpan dapat memprediksi data mahasiswa baru
"""

lr_model = joblib.load('linear_regression_model.pkl')
rf_model = joblib.load('random_forest_model.pkl')

# data baru untuk prediksi
data_baru = pd.DataFrame([{
    'GRE Score': 330,
    'TOEFL Score': 115,
    'University Rating': 4,
    'SOP': 4.5,
    'LOR ': 4.5,
    'CGPA': 9.2,
    'Research': 1
}])

# Prediksi menggunakan Linear Regression
pred_lr = lr_model.predict(data_baru)

# # Prediksi menggunakan Random Forest
pred_rf = rf_model.predict(data_baru)

print("Prediksi Chance of Admit - Linear Regression:", round(pred_lr[0], 4))
print("Prediksi Chance of Admit - Random Forest:", round(pred_rf[0], 4))

